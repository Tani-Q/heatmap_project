# -*- coding:utf-8 -*-
#ライブラリ
import sys
import google.cloud.storage
import os
#from google.cloud import storage
from google.cloud import storage as gcs
import pandas as pd
from io import BytesIO
import re
import json
import tempfile
import requests
#import urllib.request
import json
##import pprint
import asyncio
from requests.exceptions import Timeout
#from operator import itemgetter
import time


def download_blob(bucket_name,file_name,project_name):
    # create gcs cliaent
    client = gcs.Client(project_name)
    bucket = client.get_bucket(bucket_name)
    # create blob
    blob = gcs.Blob(file_name, bucket)
    content = blob.download_as_string()
    return pd.read_csv(BytesIO(content))


async def req_url(cnt,*media_id):
    loop = asyncio.get_event_loop()
    
    try: 
        response = requests.put(
                'https://asia-northeast1-nurve-cloud-98b3f.cloudfunctions.net/csv2json',
                json.dumps({'data' : media_id, "cnt" : cnt}),
                headers={'Content-Type': 'application/json'} , timeout=0.5)
        #print(response)
    except Timeout:
            print('{} continued'.format(media_id))

async def main_loop(media_id_lst):
    loop = asyncio.get_event_loop()
    
    loop.run_until_complete(asyncio.gather(*[req_url(x) for x in media_id_lst]))
    #asyncio.gather(*[req_url(x) for x in media_id_lst])

def loop_check(data):
    print("data['name']:{}".format(data['name']))
    if data['name'] == 'logging/heatmap.csv':
        return True 

def main(data,context):

    print('処理開始')
    #無限ループ阻止
    if not loop_check(data):
        sys.exit(1)

    #元データダウンロード
    #データダウンロード
    print('ファイルダウンロード開始')
    bucket_name = "heatmap-staging-csv"
    file_name = "logging/heatmap.csv"
    project_name = "nurve-cloud-98b3f"
 
    df = download_blob(bucket_name,file_name,project_name)

    #データ処理
    media_id_lst = df['media_id'].values.tolist()
    unique_media_id_lst = list(set(media_id_lst))

    #n個のmedia_idをlistにして固める
    CHNK =  299 #499
    chunks = []
    lst_cnt = len(unique_media_id_lst)
    #print(lst_cnt)
    """
    for i in range(0,lst_cnt,CHNK):
        ch = unique_media_id_lst[0:CHNK+1]
        if len(ch) < CHNK + 1:
            chunks.append(ch)
            #print(len(ch))
        else:
            chunks.append(ch)
            del unique_media_id_lst[0:CHNK+1]
            #print(len(ch))
    """
    for i in range(0,lst_cnt,CHNK):
        #if len(unique_media_id_lst) >= CHNK + 1:
        ch = unique_media_id_lst[0:CHNK+1]
        if len(ch) >= 1:
            chunks.append(ch)
            del unique_media_id_lst[0:CHNK+1]
            #print(len(ch))
        #else:
            #chunks.append(unique_media_id_lst)
    

    #debug
    #500
    #chunks = [[16247568, 16247573, 8907542, 8907543, 14150423, 8907546, 16247578, 8907549, 8907550, 13101856, 8907552, 8907553, 8907555, 17296164, 16247588, 17296166, 16247584, 13101864, 13101872, 5761841, 13101876, 5761844, 13101879, 17296184, 13101888, 16247642, 16247653, 8907628, 16247664, 16247665, 15004663, 17296244, 17296245, 17296246, 17296247, 15004664, 16247667, 16247675, 16247678, 9431936, 16247684, 16247685, 9431940, 9431941, 9431942, 16247689, 9431943, 16247691, 9431944, 9431946, 17296270, 16247687, 16247696, 17296273, 8907667, 16247702, 16247703, 17296282, 16247709, 15004672, 16247716, 8907689, 8907691, 12053421, 16247732, 17296311, 9956281, 17296314, 17296315, 17296316, 17296317, 8383420, 17296320, 16247748, 8907717, 9956301, 13102030, 13102031, 13102032, 13102033, 10480597, 8383446, 8907737, 13102043, 13102045, 13102046, 13102047, 16247782, 14150633, 16247787, 9956333, 8907763, 8907764, 8383476, 8907766, 8383479, 8907768, 8383482, 8907770, 16247804, 8383485, 16247805, 8383487, 8383488, 8383489, 16247806, 16247807, 16247809, 16247811, 16247810, 16247812, 16247815, 8383492, 16247818, 8383496, 5762058, 16247820, 9956367, 16247824, 17296403, 8383508, 16247829, 17296405, 17296407, 16247832, 17296408, 17296406, 17296411, 17296412, 16247837, 8383512, 5762070, 5762079, 16247843, 13102119, 9956391, 16772137, 16772139, 5762092, 16772142, 16772144, 16247859, 16772147, 16772148, 5762106, 8383547, 16247874, 9956419, 8383559, 5762121, 11005004, 9956430, 16247892, 9956438, 8383575, 15421534, 17296479, 11005025, 15421536, 13102181, 8383589, 8383591, 13102192, 13102200, 13102202, 13102203, 13102204, 15421542, 13102213, 13102214, 16247944, 16247945, 13102217, 16247949, 17296526, 16247950, 16247952, 15421545, 16247954, 16247958, 9956504, 9956505, 9956508, 9956510, 16247967, 9956512, 16247969, 17296546, 17296547, 16247972, 16247973, 16247974, 9956513, 9956519, 13102246, 13102245, 16247983, 16247984, 16247987, 16247988, 16247990, 16247991, 16247992, 16247994, 16247995, 16247997, 4189374, 4189375, 17296576, 4189376, 16248000, 16248003, 16248004, 12053693, 16247998, 15421555, 16248009, 13102281, 16772301, 15421557, 16772303, 16772304, 16772305, 16772307, 12053719, 12053720, 12053721, 12053722, 12053725, 12053726, 13102304, 12053729, 12053730, 9956580, 17296613, 12053734, 12053735, 12053736, 13102311, 12053739, 12053740, 12053741, 12053742, 16248047, 17296624, 17296625, 12053753, 12053754, 17296634, 12053756, 17296636, 12053758, 12053759, 12053760, 17296638, 17296641, 12053763, 12053764, 17296645, 12053766, 17296648, 17296649, 16772362, 16772363, 16772364, 16772365, 16248078, 16248079, 17296656, 16248081, 16248083, 16248084, 16248085, 16248086, 17296659, 17296663, 16248089, 16248090, 16248091, 16248092, 17296664, 16248094, 16248095, 16248099, 17296675, 17296676, 16248102, 16248103, 16248105, 16248107, 16248109, 16248110, 16248112, 16248113, 16248116, 16248120, 16248129, 16248131, 16248135, 16248136, 16248138, 16248140, 16248144, 16248147, 16248149, 16248156, 16248158, 16248160, 16248166, 16248167, 6286707, 11005312, 16248194, 16248196, 16248200, 7814534, 11005325, 16248214, 6286749, 11529630, 16248223, 11529632, 16248225, 16248228, 16248234, 16248239, 16248242, 16248243, 16248244, 16248263, 16248264, 16248265, 16248267, 16248268, 9956831, 9956838, 16248296, 9956845, 16248303, 9956849, 9956854, 9956863, 9956867, 16248326, 16772618, 16772619, 16772620, 16772621, 16772622, 16772623, 16248361, 16248368, 16248372, 16248374, 17296953, 17296954, 17296955, 16248378, 17296957, 17296958, 17296959, 16248381, 16248383, 16248390, 15838564, 16248405, 16248414, 16248420, 13102693, 8384103, 16248425, 13102698, 16248427, 8960849, 16248434, 16248436, 8384117, 13102708, 16248439, 8384125, 16248446, 8384127, 16248451, 8384134, 8384135, 8384136, 16248457, 3141259, 8384140, 8384142, 8384146, 8384150, 17297048, 17297049, 17297050, 17297052, 17297053, 8384157, 17297055, 10481312, 17297054, 17297056, 3141283, 17297058, 17297060, 17297062, 17297063, 17297064, 17297061, 16248488, 8384171, 13102761, 16248494, 16248499, 3141305, 8384186, 17297083, 13102779, 3141317, 16248523, 8384204, 17297108, 17297109, 17297110, 17297112, 17297114, 17297115, 17297116, 16248543, 16248544, 16248546, 16248547, 3141348, 16248549, 16248550, 16248551, 16248548, 16248553, 16248552, 16248555, 16248556, 17297139, 17297140, 17297141, 17297142, 17297143, 17297144, 17297145, 17297146, 16248571, 16248574, 16248576, 16248578, 3141378, 16772866, 3141381, 16248582, 16248583, 16248584, 16248585, 16248586, 16772867, 16772868, 16248589, 16248590, 16248591, 16248592, 16248594, 16248596, 16248599, 14675756, 14675757, 14675758, 14675759, 14675760, 16248627, 16248629, 16248630, 16248631, 16248632, 16248634, 16248635, 16248636, 16248639, 16248645, 16248647, 13102923, 16248653, 16248657, 17297235, 17297238, 17297239, 17297240, 8908632, 16248664, 8908643, 16248678, 13102951, 15630103, 17297261]] #テスト用
    #300
    #chunks = [[11002310, 12313032, 11002313, 11002314, 11788745, 14803404, 10346956, 11002316, 11002318, 11002320, 11788747, 15852003, 12444132, 15852004, 15852006, 15852007, 15852008, 7594474, 15852010, 15852011, 7594481, 16245239, 16638457, 16114174, 13492739, 16376329, 16638481, 16376338, 16376340, 16376341, 16114200, 16638489, 16376346, 16376348, 16376351, 16376357, 14934572, 16376364, 16376368, 13492785, 16114226, 13492788, 16376372, 16245302, 15852087, 14934586, 15852091, 16114236, 16376380, 16114239, 11919939, 11919942, 12051015, 12051016, 12051017, 12051018, 14934598, 12051020, 16114248, 16245326, 16376391, 5890644, 16245333, 5890646, 5890647, 5890648, 5890649, 16376407, 16638551, 16114268, 16638555, 9953886, 16114270, 16114272, 16638567, 14803560, 7987817, 13623913, 9953901, 12313198, 15852143, 13361776, 16114285, 16114286, 16114287, 16114289, 5890677, 16114292, 16114295, 16245359, 16114297, 16114298, 16114299, 16114300, 16114301, 16245369, 7987839, 16376442, 16114306, 16114308, 12313221, 16114309, 16114311, 16114313, 16114315, 16114316, 16114317, 16114318, 10347153, 16376471, 16376474, 15852187, 6808222, 12313246, 15852193, 15852197, 15852198, 16245415, 12313267, 12313299, 13624022, 16376536, 16376541, 12313316, 6152945, 1696498, 13099763, 16245489, 16245491, 14934775, 1696504, 12444410, 16245500, 1696511, 16245506, 16245508, 13099785, 15852297, 16245517, 12313358, 15852304, 15721234, 15852308, 16245543, 12313391, 15721263, 15721264, 14410546, 15721265, 15721268, 16376628, 16245563, 12837693, 12837698, 16245580, 12968785, 16376657, 12444502, 12313432, 16245598, 16376670, 16376674, 12444516, 6808421, 12313445, 16376684, 15852397, 12313456, 6808433, 14934896, 16376695, 6808441, 16376698, 16376701, 12444543, 16245632, 12313474, 16376709, 12444550, 16245639, 12313480, 14934928, 16245649, 8250259, 16376726, 12444567, 10347416, 10347417, 8250267, 12444572, 10347421, 10347422, 16376734, 16245668, 12313513, 12313514, 16245679, 12313526, 14934967, 16245686, 12313530, 16114619, 16114622, 16376766, 16114624, 14541761, 4711362, 16114625, 16114627, 4711366, 12313544, 12444616, 16114633, 4711371, 16245705, 16114637, 4711374, 16114638, 12444624, 4711378, 14541781, 16376789, 12444631, 4711388, 12313566, 12444640, 15852515, 12444650, 13624300, 16114669, 4711406, 14541807, 16114673, 16114674, 16114677, 14935031, 10347513, 15852538, 10347515, 15721467, 16114681, 16114686, 16114690, 15721475, 14803975, 16114697, 14935052, 14541840, 16114704, 16114714, 16114731, 16376876, 9823293, 14541893, 16639063, 9954418, 15852676, 13362309, 13362315, 14541977, 3531932, 16114847, 3531936, 15852706, 14541987, 16114853, 3663015, 3663019, 7464112, 3663030, 16245942, 16245944, 16245946, 15852731, 16245948, 15852733, 7464128, 3663041, 12313794, 16114881, 16114885, 3663046, 15721671, 16114886, 16114888, 16114889, 3663051, 7464141, 6808782, 3663061, 6808791, 7464153, 3663067, 15852763, 6808797, 8905951, 16245986, 7464163, 16245994, 15852783]]
    #100
    #chunks = [[5659078, 5659079, 13654486, 16407000, 16800235, 17062382, 16538098, 16538100, 16538103, 16538108, 16538115, 13654536, 16538120, 8804874, 16538125, 5659152, 5659154, 13654551, 16538135, 14572065, 14572066, 16538145, 13785636, 14572068, 14572070, 16538152, 8804905, 14572074, 16800298, 14572076, 17062450, 16538164, 13654582, 8411704, 10508862, 10508870, 10508872, 16538184, 16538188, 10508878, 16800339, 10508887, 10508895, 13261410, 10508900, 17455717, 10508904, 15751787, 16800368, 8411761, 17324658, 15751797, 16800381, 13654657, 5659267, 14572176, 14572183, 14572184, 14572187, 16538267, 16800411, 16800425, 15620780, 16800440, 13261500, 13261506, 16800454, 13785800, 13785805, 17193678, 16538322, 13785813, 13785815, 14572249, 16800473, 13785820, 14572256, 14572261, 13785832, 16538345, 13785840, 16538353, 5659388, 8936188, 13785854, 13785859, 16669457, 15620884, 16538394, 6970152, 17062696, 15620920, 15620937, 10771275, 6314839, 13261657, 6970202, 16800607, 9853793, 16800612]]
    print('データ転送開始')

    loop = asyncio.get_event_loop()
    cnt = 1
    for chunk in chunks:
        media_id_lst = list(chunk)
        loop.run_until_complete(asyncio.gather(req_url(cnt,*media_id_lst)))
        cnt += 1
        time.sleep(2.7)
